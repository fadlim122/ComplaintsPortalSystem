@model ComplaintPortalSystem.Models.Complaint
@using ComplaintPortalSystem.Models;
@using ComplaintPortalSystem.Common;

@{
    ViewBag.Title = "Allocate";
    IEnumerable<Department> departmentList = ViewData["DepartmentList"] as IEnumerable<Department>;
    IEnumerable<AccountHolder> supervisorList = ViewData["SupervisorList"] as IEnumerable<AccountHolder>;
    IEnumerable<AccountHolder> complaintHandlerList = ViewData["ComplaintHandlerList"] as IEnumerable<AccountHolder>;
    IEnumerable<Complaint> isRedflagList = ViewData["IsRedflagList"] as IEnumerable<Complaint>;
}

<style type="text/css">
    .dropdown1 select {
        border: 0px;
        width: 200px;
        background: none;
    }


    .dropdown1 {
        border: 2px solid #7d6754;
        border-radius: 5px;
        padding: 3px;
        -webkit-appearance: none;
        background-position: 225px;
        background-repeat: no-repeat;
        text-indent: 0.01px; /*In Firefox*/
        text-overflow: ''; /*In Firefox*/
        width: 200px;
    }
</style>

<script src="../../Scripts/jquery-3.4.1.js" type="text/javascript"></script>
<script src="../../Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>

<script type="text/javascript">

    $(document).ready(function () {
            
            //Dropdownlist Selectedchange event
        $("#SupervisorDepartment").change(function () {
                //var showAvailableSupervisorOnly = true;
            $("#Supervisor").empty();
            var bShowAvailableSupervisorOnly = true;

            if ($('#showAvailableSupervisorOnly:checked').val() != undefined) {
                bShowAvailableSupervisorOnly = true;
            } else {
                bShowAvailableSupervisorOnly = false;
            }

                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetSupervisor")', // we are calling json method
                    dataType: 'json',
                    data: { id: $("#SupervisorDepartment").val(), showAvailableSupervisorOnly: bShowAvailableSupervisorOnly },
                    success: function (states) {
                        
                        // states contains the JSON formatted list
                        // of states passed from the controller
                        $.each(states, function (i, state) {
                            $("#Supervisor").append('<option value="' + state.Value + '">' + state.Text + '</option>');
                        }); // here we are adding option for States
                    },
                    error: function (ex) {
                        alert('Failed to retrieve states.' + ex);
                    }
                });
                return false;
            })
        });
                    
    

        $(document).ready(function () {
            //Dropdownlist Selectedchange event
            $("#HandlerDepartment").change(function () {
                $("#ComplaintHander").empty();
                var bShowAvailableHandlerOnly = true;

            if ($('#showAvailableHandlerOnly:checked').val() != undefined) {
                bShowAvailableHandlerOnly = true;
            } else {
                bShowAvailableHandlerOnly = false;
                }
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetComplaintHandler")', // we are calling json method
                    dataType: 'json',
                    data: { id: $("#HandlerDepartment").val(), showAvailableHandlerOnly: bShowAvailableHandlerOnly },
                    success: function (handler) {
                        // states contains the JSON formatted list
                        // of states passed from the controller
                        $.each(handler, function (i, handle) {
                            $("#ComplaintHander").append('<option value="' + handle.Value + '">' + handle.Text + '</option>');
                        }); // here we are adding option for States
                    },
                    error: function (ex) {
                        alert('Failed to retrieve states.' + ex);
                    }
                });
                return false;
            })
        });
</script>
<script>
    function myFunction() {
        //var x = document.getElementById("mySelect");
        //var supervisor = document.getElementById("supervisorAllocate");
        //var complaintHandler = document.getElementById("complaintHandlerAllocate");


        //var y = x.options[x.selectedIndex].value;

        //if (y == 'true') {
        //    complaintHandler.style.display = "none";
        //    supervisor.style.display = "block";

        //} else {
        //    supervisor.style.display = "none";
        //    complaintHandler.style.display = "block";

        //}
    }

    function showSupervisor() {
        var supervisor = document.getElementById("supervisorAllocate");
        supervisor.style.display = "block";
    }
    function showComplaintHander() {
        var complaintHandler = document.getElementById("complaintHandlerAllocate");
        complaintHandler.style.display = "block";
    }

</script>
<h2>Manage Complaint</h2>
@Html.ValidationSummary(false, "", new { @class = "text-danger" })
@using (Html.BeginForm("UpdateRedFlag", "Complaint", new { id = @Model.ID }, FormMethod.Post))
{

    @Html.AntiForgeryToken()

<div>
    <div>
        <button type="button" onclick="location.href='@Url.Action("Index", "Email")'" , htmlAttributes=new { class="btn btn-success" }>
            Email
        </button>
    </div>

    <hr />
    <dl class="dl-horizontal">
        <dt>
            Category
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Category.CategoryDescription)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Title)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Title)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Description)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Description)
        </dd>
        @if (Model.ComplaintOwnerID != null)
        {
            <dt>
                Email
            </dt>

            <dd>
                @Html.DisplayFor(model => model.AccountHolder.Email)
            </dd>
        }
        <dt>
            @Html.DisplayNameFor(model => model.Attachment)
        </dt>
        <dd>
            @if (Model.Attachment == null)
            {
                <div>
                    N.A
                </div>
            }
            else
            {
                <img src="~/Images/@Model.Attachment" height="350" width="450" />
            }
        </dd>


        <dt>
            Date Submitted
        </dt>

        <dd>
            @Html.DisplayFor(model => model.DateSubmitted)
        </dd>

        @if (Model.ComplaintOwnerID != null)
        {
            <dt>
                Role
            </dt>

            <dd>
                @Html.DisplayFor(model => model.AccountHolder.Role)
            </dd>
        }
        else if (Model.PublicEmail != null && Model.PublicName != null)
        {
            <dt>
                Role
            </dt>

            <dd>
                PUBLIC
            </dd>

            <dt>
                Email
            </dt>

            <dd>
                @Html.DisplayFor(model => model.PublicEmail)
            </dd>

            <dt>
                Name
            </dt>

            <dd>
                @Html.DisplayFor(model => model.PublicName)
            </dd>
        }
        else
        {
            <dt>
                Role
            </dt>

            <dd>
                ANONYMOUS
            </dd>
        }

        @if (Model.RatingEfficacy != null)
        {
            <dt>
                Efficacy
            </dt>

            <dd>
                @Html.DisplayFor(model => model.RatingEfficacy)
            </dd>
        }
        @if (Model.RatingSpeed != null)
        {
            <dt>
                Speed
            </dt>

            <dd>
                @Html.DisplayFor(model => model.RatingSpeed)
            </dd>
        }
        @if (Model.RatingFriendliness != null)
        {
            <dt>
                Friendliness
            </dt>

            <dd>
                @Html.DisplayFor(model => model.RatingFriendliness)
            </dd>
        }
        @if (Model.RatingFeedback != null)
        {
            <dt>
                Feedback
            </dt>

            <dd>
                @Html.DisplayFor(model => model.RatingFeedback)
            </dd>
        }

        <dt>Is Red Flag</dt>
        <dd>
            @Html.DropDownListFor(model => model.IsRedFlag, new SelectList(
                        new[] {
                            new { Value = "", Text = "-- Select --" },
                            new { Value = "true", Text = "YES" },
                            new { Value = "false", Text = "NO" },
                        },
                        "Value",
                        "Text"
                    ), htmlAttributes: new { @class = "control-label col-md-2 dropdown1", id = "mySelect", required = "required" })

            @Html.ValidationMessageFor(model => model.IsRedFlag, "", new { @class = "text-danger" })
        </dd>
        <dt>@Html.DisplayNameFor(model => model.Status)</dt>
        <dd>
            @Html.DropDownListFor(model => model.Status, new SelectList(
                       new[] {
                           new { Value = "", Text = "-- Select --" },
                           new { Value = "OPEN", Text = "OPEN" },
                           new { Value = "PENDING", Text = "PENDING" },
                           new { Value = "PENDING_EXTERNAL", Text = "PENDING EXTERNAL" },
                           new { Value = "CLOSED", Text = "CLOSED" },
                           new { Value = "REOPEN", Text = "REOPEN" },
                       },
                       "Value",
                       "Text"
                   ), htmlAttributes: new { @class = "control-label col-md-2 dropdown1", id = "mySelect", required = "required" })

            @Html.ValidationMessageFor(model => model.IsRedFlag, "", new { @class = "text-danger" })
        </dd>
        <dt>Closed On</dt>
        <dd> @Html.DisplayFor(model => model.DateClose)</dd>
        <dt></dt>
        <dd><input type="submit" value="Save" class="btn btn-default" /></dd>
    </dl>

    <div class="text-success">
        @ViewBag.Message
    </div>

</div>
}



<br />
<div class="container" id="complaintHandlerAllocate" style="display:none">
    <button type="button" class="btn btn-info btn-lg" data-target="#complaintHandlerModalPopUp" data-toggle="modal">Add Complaint Handler</button>
    <table class="table">
        <tr>
            <th>
                Department's Name
            </th>
            <th>
                Complaint Handler's Name
            </th>
            <th>
                Status
            </th>
            <th>
                Remark
            </th>
            <th>
                Response Date
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model.HandlerAssignments)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.ComplaintHandler.Department.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ComplaintHandler.AccountHolder.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Status)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Remark)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ResponseDate)
                </td>
                <td>
                    @*<input type="submit" value="Delete" class="btn btn-default" />*@
                    @Html.ActionLink("Delete", "DeleteComplaintHandlerAssignment", new { handlerID = item.HandlerID, complaintId = item.ComplaintID })
                </td>
            </tr>
        }
    </table>
    <div class="modal" id="complaintHandlerModalPopUp" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Handle</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    @using (Html.BeginForm("AllocateHandler", "Complaint", Model.ID, FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()

                        <div class="form-horizontal">
                            <div class="form-group">
                                @Html.LabelFor(model => model.HandlerAssignments.FirstOrDefault().ComplaintHandler.DepartmentID, "Department", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownList("HandlerDepartment", ViewData["HandlerDepartment"] as List<SelectListItem>, new { style = "width:250px", @class = "dropdown1" })
                                    @Html.ValidationMessageFor(model => model.HandlerAssignments.FirstOrDefault().ComplaintHandler.DepartmentID, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                @Html.LabelFor(model => model.HandlerAssignments.FirstOrDefault().ComplaintHandler.AccountHolder.ID, "Complaint Handler", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @*@Html.DropDownListFor(model => model.HandlerAssignments.FirstOrDefault().ComplaintHandler.AccountHolder.ID, new SelectList(complaintHandlerList, "ID", "Name"), htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.HandlerAssignments.FirstOrDefault().ComplaintHandler.AccountHolder.ID, "", new { @class = "text-danger" })*@

                                    @Html.DropDownList("ComplaintHander", new SelectList(string.Empty, "Value", "Text"), "Please select a Complaint Handler", new { style = "width:250px", @class = "dropdown1" })
                                    @Html.ValidationMessageFor(model => model.HandlerAssignments.FirstOrDefault().ComplaintHandler.AccountHolder.ID, "", new { @class = "text-danger" })

                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                <div class="col-md-10">
                                    <input checked="checked" data-val="true" id="showAvailableHandlerOnly" name="showAvailableHandlerOnly" type="checkbox" value="true" />Show Available Complaint Handler Only 
                                </div>
                            </div>
                        </div>

                        

                            @Html.HiddenFor(model => model.ID, "ComplaintID");
                            <div class="modal-footer">
                                <button class="btn btn-primary">Assign</button>
                                <button class="btn btn-danger" data-dismiss="modal">Cancel</button>
                            </div>
                        }
                </div>
            </div>
        </div>
    </div>

</div>


<div class="container" id="supervisorAllocate" style="display:none">
    <button type="button" class="btn btn-info btn-lg" data-target="#supervisorModalPopUp" data-toggle="modal">Add Supervisor</button>

    <table class="table">
        <tr>
            <th>
                Department's Name
            </th>
            <th>
                Supervisor's Name
            </th>
            <th>
                Status
            </th>
            <th>
                Remark
            </th>
            <th>
                Response Date
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model.SupervisorAssignments)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Supervisor.Department.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Supervisor.AccountHolder.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Status)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Remark)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ResponseDate)
                </td>
                <td>
                    @*<input type="submit" value="Delete" class="btn btn-default" />*@
                    @Html.ActionLink("Delete", "DeleteSupervisorAssignment", new { supervisorId = item.SupervisorID, complaintId = item.ComplaintID })
                </td>
            </tr>
        }
    </table>
    <div class="modal" id="supervisorModalPopUp" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Handle</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    @using (Html.BeginForm("Allocate", "Complaint", new { id = @Model.ID }, FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()

                        <div class="form-horizontal">
                            <div class="form-group">
                                @Html.LabelFor(model => model.SupervisorAssignments.FirstOrDefault().Supervisor.DepartmentID, "Department", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @*@Html.DropDownListFor(model => model.SupervisorAssignments.FirstOrDefault().Supervisor.DepartmentID,  ViewData["Country"] as List<SelectListItem>, htmlAttributes: new { @class = "form-control" })*@
                                    @Html.DropDownList("SupervisorDepartment", ViewData["SupervisorDepartment"] as List<SelectListItem>, new { style = "width:250px", @class = "dropdown1" })
                                    @Html.ValidationMessageFor(model => model.SupervisorAssignments.FirstOrDefault().Supervisor.DepartmentID, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                @Html.LabelFor(model => model.SupervisorAssignments.FirstOrDefault().Supervisor.AccountHolder.ID, "Supervisor", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @*@Html.DropDownListFor(model => model.SupervisorAssignments.FirstOrDefault().Supervisor.AccountHolder.ID, new SelectList(supervisorList, "ID", "Name"), htmlAttributes: new { @class = "form-control" })*@

                                    @Html.DropDownList("Supervisor", new SelectList(string.Empty, "Value", "Text"), "Please select a Supervisor", new { style = "width:300px", @class = "dropdown1" })
                                    @Html.ValidationMessageFor(model => model.SupervisorAssignments.FirstOrDefault().Supervisor.AccountHolder.ID, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-horizontal">
                            <div class="form-group">
                                <div class="col-md-10">
                                    <input checked="checked" data-val="true" id="showAvailableSupervisorOnly" name="showAvailableSupervisorOnly" type="checkbox" value="true" />Show Available Supervisor Only
                                </div>
                            </div>
                        </div>

                        @Html.HiddenFor(model => model.ID, "ComplaintID");
                        <div class="modal-footer">
                            <button class="btn btn-primary">Assign</button>
                            <button class="btn btn-danger" data-dismiss="modal">Cancel</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

</div>

@if (Model.IsRedFlag == true || Model.SupervisorAssignments.Count > 0 || Model.Status == ComplaintStatus.REOPEN)
{

    <script>
        showSupervisor();
    </script>
}


@if (Model.IsRedFlag == false || Model.HandlerAssignments.Count > 0 || Model.Status == ComplaintStatus.REOPEN)
{

    <script>
        showComplaintHander();
    </script>
}





